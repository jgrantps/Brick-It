c
current_user
params
c
selection.public == true
selection.user == current_user
selection.user
current_user
selection
c
selection.user
current_user
selection
c
specific_selection_param
c
bb[:id].to_i
bb[:id]
bb = params.permit(:id)
params.permit(:id)
params
selections_params
selection_params
params
c
signed_in?
current_user
c
token
c
token
exit
token
c
token
c
token
c
token
c
request.env["HTTP_AUTHORIZATION"]
token
c
token
c
s
user
c
current_user
c
current_user
c
request.env["HTTP_AUTHORIZATION"]
token
c
request.env["HTTP_AUTHORIZATION"]
c
@current_user
!!current_user
signed_in?
request.env["HTTP_AUTHORIZATION"]
c
request.env["HTTP_AUTHORIZATION"]
c
request.env["HTTP_AUTHORIZATION"]
c
request.env["HTTP_AUTHORIZATION"]
c
cc
C
request.env["HTTP_ATHORIZATION"]
current_user
current-user
signed_in?
c
@current_user
c
@current_user
current_user
c
token != 'undefined'
token
token = request.env["HTTP_AUTHORIZATION"]
Auth.decode_token(token)
request.env["HTTP_AUTHORIZATION"]
c
@current_user
c
decode_results.first["user"]["id"]
request.env["HTTP_AUTHORIZATION"]
requEst.env["HTTP_AUTHORIZATION"]
requst.env
requst.env["HTTP_AUTHENTICATION"]
requst.env["HTTP_AUTHORIZATION"]
request
decode_results.first["user"]["id"]
decode_results.first["user"]
decode_results.first[:user]
decode_results.first.user
decode_results.first
decode_results
decode_results.user.first
decode_results.user[0]
decode_results.user[0].user
decode_results.user
decode_results
c
current_user
c
session
session[:token]
token
c
current_user
session[:token]
c
render json: {error: {message: "hi from the check_token!!!"}} unless (session[:token] == token)
check_token
c
render json: {error: {message: "hi from the check_token!!!"}} unless (session[:token] == token)
session[:token]==token
session[:token]
check_token
current_user
session[:user_id]
session[:token]
c
current_user
session[:user_id]
session[:token]
c
session[:user_id]
token
session[:token]
c
session[:token]
session[:token] = token
token
session[:token]
session[:token
token
c
exit
c
current_user
user
c
EXIT
C
request.env["HTTP_AUTHORIZATION"]
c
decode_results
exit
Exception
errors
JWT
JWT.decode(token, salt, true, { algorithm: algo })
c
puts JWT.decode(token, salt, true, { algorithm: algo })
JWT.decode(token, salt, true, { algorithm: algo }).error
JWT.decode(token, salt, true, { algorithm: algo }).errors.exception
JWT.decode(token, salt, true, { algorithm: algo }).errors
JWT.decode(token, salt, true, { algorithm: algo })
JWT::DecodeError Exception
error
JWT.decode(token, salt, true, { algorithm: algo })
c
token
c
token
Auth.decode_token(token) === "JWT::DecodeError Exception: Nil JSON web token"
Auth.decode_token(token) == "JWT::DecodeError Exception: Nil JSON web token"
Auth.decode_token(token) == (JWT::DecodeError Exception: Nil JSON web token)
Auth.decode_token(token) == JWT::DecodeError Exception: Nil JSON web token
Auth.decode_token(token)
Auth.decode_token(token).status.message
Auth.decode_token(token).status.messages
Auth.decode_token(token).status.nil?
Auth.decode_token(token).status
token
Auth.decode_token(token)
token
c
token
c
token
c
token
c
Auth.decode_token(bob)
bob = "eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjp7Im5hbWUiOiJMb3Vpc2UiLCJpZCI6M319.Q3t3197vzuk7iXlDfuZHXcoM-1lM0-ei_8NZrHL4qMp"
token
Auth.decode_token(bob)
bob
bob = "hello"
token
bob="ojojoajsodjfoajsf;alskjf"
Auth.decode_token(token).true?
Auth.decode_token(token)
token
c
algo
salt
c
JWT.decode(token, Rails.application.credentials.JWT[:AUTH_SECRET], true, { algorithm: Rails.application.credentials.JWT[:AUTH_ALG] })
Rails.application.credentials.JWT[:AUTH_ALG]
Rails.application.credentials.JWT[:AUTH_SECRET]
auth.secret
secret
c
EXIT
C
request.env["HTTP_AUTHORIZATION"]
request.env
request
params
c
params
c
userParams
params
