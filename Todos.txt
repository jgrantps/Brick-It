Todos

Monday March 2nd:

=> complete building out the backend controllers#actions

=> :) confirm the persistence of current_user throughout the different controllers (confirm the the before_action validations needed!!)
    :) working with a before_action signed_in? that runs over all non log-in/sign-up actions.

=>  :) implement the fast JSON api and build out the serializers.

=> :) confirm the integration with Rebrickable API.

    => :) confirm how to handle the api key.
    => :) confirm how to handle the JSON retrieved and map it to its appropriate builder classes.

    BUILDER CLASSES FOR REBRICKABLE CONTENT:

    1. :) Builder class for the Theme.
        a. user makes a get request for all themes at start.
            // https://rebrickable.com/api/v3/lego/themes/
        b. theme data comes back and is built into "Theme" objects and rendered to the DOM.
        c. User selects a particular theme, which then triggers another get request for all kits of that theme:
            // https://rebrickable.com/api/v3/lego/sets/?theme_id=12
        d. kit data are returned and are again built into "Kit" objects and rendered to the DOM.
        e. User clicks on a "select" button, which adds the selected "Kit" object to the selections array
        f. User clicks on a "Submit" button, which sends a "POST" request to the local API <selections#create>.
            // http://localhost:3001/selections
        g. Create action populates database with the selections to the current_user. It then renders back all selections.
        h. React rebuilds the user's selections page with the updated selections.      


    2. :) Builder class for the kit.
    3. :) Builder class for the Selection.



=> :) add image URL to the kit database (check for theme images too.)
=> configure parent_id for themes to group theme ids.
=
=>begin building React components.  

    Login: 
        => separate container with components.
        => CSS divs to display validation errors.
        => routes away to '/user'(?) when logged in or signed up.
        => omniAuth?????????????  Twitter??


    Themes:
        => Alphabetical sorting, with:
        => Filter for each letter
        => Search based on state.

 => render Kit list component in response to selected theme.

